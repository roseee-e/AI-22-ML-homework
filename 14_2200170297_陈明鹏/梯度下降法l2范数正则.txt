impoimport numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from matplotlib import rcParams

# 设置绘图参数
config = {
    "mathtext.fontset": 'stix',
    "font.family": 'serif',
    "font.serif": ['SimHei'],
    "font.size": 10,
    'axes.unicode_minus': False
}
rcParams.update(config)

# 读取数据
data_path = 'C:/Users/lietorest/Desktop/学习/大二下/机器学习/练习/练习2/regress_data1.csv'
data = pd.read_csv(data_path)

# 划分训练集和测试集
x_data = data.iloc[:, :-1]
y_data = data.iloc[:, -1]
x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.36, random_state=42)

# 添加偏置项
x_train.insert(0, 'Ones', 1)
X_train = x_train.values
Y_train = y_train.values.reshape(-1, 1)

# 定义损失函数
def computeCost(X, Y, W):
    Y_hat = X @ W
    loss = np.sum((Y_hat - Y) ** 2) / (2 * X.shape[0]) + 0.0001 / 2 * np.sum(W ** 2)
    return loss

# 梯度下降训练模型
def gradientDescent(X, Y, W, alpha, iters):
    loss_history = []
    for i in range(iters):
        Y_hat = np.dot(X, W)
        dW = X.T @ (Y_hat - Y) / X.shape[0]
        W += -alpha * dW
        loss = computeCost(X, Y, W)
        loss_history.append(loss)
    return loss_history, W

alpha = 0.0001
iters = 10000
initial_weights = np.zeros((X_train.shape[1], 1))
loss_history, trained_weights = gradientDescent(X_train, Y_train, initial_weights, alpha, iters)

# 绘制预测结果和训练数据
x_range = np.linspace(x_data['人口'].min(), x_data['人口'].max(), 100)
f = trained_weights[0, 0] + (trained_weights[1, 0] * x_range)

plt.figure(figsize=(8, 6))
plt.plot(x_range, f, 'r', label='预测值')
plt.scatter(x_train['人口'], y_train, label='训练数据')
plt.xlabel('人口')
plt.ylabel('收益')
plt.title('预测收益和人口规模')
plt.legend()
plt.grid(True)
plt.show()

# 绘制损失函数随迭代次数的变化图
plt.figure(figsize=(8, 6))
plt.plot(np.arange(iters), loss_history, 'r')
plt.xlabel('迭代次数')
plt.ylabel('代价')
plt.title('误差随迭代次数变化')
plt.grid(True)
plt.show()